<?php
// $Id: multicolumncheckboxesradios.module,v 1.14 2009/10/03 22:00:01 mattyoung Exp $
/**
 * @file multicolumncheckboxesradios.module
 * Extends checkboxes/radios form element to have multi-column display option
 * See README.txt for details
 */




function multicolumncheckboxesradios_widget_settings_alter(&$v, $op, $widget) {
  $widget_types = array_merge(array(
    'optionwidgets_buttons',
    'content_taxonomy_options',
    'nodereference_buttons',
    'userreference_buttons',
  ), variable_get('multicolumncheckboxesradios_extra_widget_types', array()));

  if (in_array($widget['type'], $widget_types) || in_array($widget['widget_type'], $widget_types)) {
    switch ($op) {
      case 'form':
        $v['multicolumncheckboxesradios'] = array(
          '#type' => 'fieldset',
          '#title' => t('Check boxes/radio buttons widget display settings'),
          '#description' => t('Adjust settings to display check boxes/radio buttons widget in single column or multiple columns.'),
          '#collapsible' => FALSE,
          '#collapsed' => FALSE,
          '#weight' => 2,
        );
        $v['multicolumncheckboxesradios']['mccr_width'] = array(
          '#type' => 'select',
          '#title' => t('Columns'),
          '#options' => array(1 => '1', 2 => '2', 3 => '3', 4 => '4', 5 => '5', 6 => '6', 7 => '7', 8 => '8', 9 => '9'),
          '#default_value' => isset($widget['mccr_width']) ? $widget['mccr_width'] : 1,
          '#description' => t('The number of columns desired.'),
          '#weight' => -10,
        );
        $v['multicolumncheckboxesradios']['mccr_minimum-height'] = array(
          '#type' => 'select',
          '#title' => t('Minimum height'),
          '#options' => array(0 => '--', 1 => '1', 2 => '2', 3 => '3', 4 => '4',
                              5 => '5', 6 => '6', 7 => '7', 8 => '8', 9 => '9',
                              10 => '10', 11 => '11', 12 => '12', 13 => '13', 14 => '14',
                              15 => '15', 16 => '16', 17 => '17', 18 => '18', 19 => '19', 20 => '20'),
          '#default_value' => isset($widget['mccr_minimum-height']) ? $widget['mccr_minimum-height'] : 0,
          '#description' => t('Make sure columns are not shorter than this number, can be left blank.'),
          '#weight' => -9,
        );
        $v['multicolumncheckboxesradios']['mccr_row-major'] = array(
          '#type' => 'checkbox',
          '#title' => t('Row-major'),
          '#default_value' => isset($widget['mccr_row-major']) ? $widget['mccr_row-major'] : 0,
          '#description' => t('Select this to display check boxes/radios button across the screen first, then down.'),
          '#weight' => -8,
        );
        break;
      case 'save':
        $v = array_merge($v, array('mccr_width', 'mccr_minimum-height', 'mccr_row-major'));
        break;
    }
  }
}



function multicolumncheckboxesradios_elements() {
  return array(
    'checkboxes' => array(
      '#multicolumn' => FALSE,
      '#process' => array('multicolumncheckboxesradios_element_process'),
    ),
    'radios' => array(
      '#multicolumn' => FALSE,
      '#process' => array('multicolumncheckboxesradios_element_process'),
    ),
  );
}



/**
 * Form element process function to add multi-column markup to checkboxes/radios
 *
 * @param $element
 * @return the processed element
 */
function multicolumncheckboxesradios_element_process($element, $edit, &$form_state, $form) {

  // only do this if it's coming from CCK, otherwise, let the normal form element through
  if (empty($element['#multicolumn']) && isset($form_state['#field_info'])) {
    $element['#multicolumn'] = array(
      'width' => $form_state['#field_info'][$element['#parents'][0]]['widget']['mccr_width'],
      'minimum height' => $form_state['#field_info'][$element['#parents'][0]]['widget']['mccr_minimum-height'],
      'row-major' => $form_state['#field_info'][$element['#parents'][0]]['widget']['mccr_row-major'],
    );
  }


  // if multicolumn option is not set or just one column, do nothing.
  if ($element['#multicolumn']['width'] <= 1) {
    return $element;
  }



  $min_height = $element['#multicolumn']['minimum height'] ? $element['#multicolumn']['minimum height'] : 1;
  // at least the specified minimum
  $column_height = max($min_height, ceil(count($element['#options']) / $element['#multicolumn']['width']));
  $column_width = ceil(count($element['#options']) / $column_height);
  if ($column_width == 1) {    // result is only one column
    return $element;           // then do nothing
  }

    // turn checkbox elements into column grouped inside <div>s
  if (!empty($element['#multicolumn']['row-major'])) {
    $begins_ends = _multicolumncheckboxesradios_transpose($column_width, $column_height, $element);
    // first column
    $element[$begins_ends['begins'][0]]['#prefix'] = '<div class="multicolumncheckboxesradios-wrapper clear-block"><div class="multicolumncheckboxesradios-column-first multicolumncheckboxesradios-column">';
    $element[$begins_ends['ends'][0]]['#suffix'] = '</div>';
    // the middle columns, not include the last column, this could be empty if we only have two columns
    for ($i = 1 ; $i < $column_width - 1 ; ++$i) {
      $element[$begins_ends['begins'][$i]]['#prefix'] = '<div class="multicolumncheckboxesradios-column">';
      $element[$begins_ends['ends'][$i]]['#suffix'] = '</div>';
    }
    // last column
    $element[$begins_ends['begins'][$i]]['#prefix'] = '<div class="multicolumncheckboxesradios-column multicolumncheckboxesradios-column-last">';
    $element[$begins_ends['ends'][$i]]['#suffix'] = '</div></div>';
  }
  else {
    $keys = array_keys($element['#options']);   // get the keys in numeric order
    // first column
    $element[$keys[0]]['#prefix'] = '<div class="multicolumncheckboxesradios-wrapper clear-block"><div class="multicolumncheckboxesradios-column-first multicolumncheckboxesradios-column">';
    $element[$keys[$column_height - 1]]['#suffix'] = '</div>';
    // the middle columns, not include the last column, this could be empty if we only have two columns
    for ($i = 1 ; $i < $column_width - 1 ; ++$i) {
      $element[$keys[$i * $column_height]]['#prefix'] = '<div class="multicolumncheckboxesradios-column">';
      $element[$keys[($i + 1) * $column_height - 1]]['#suffix'] = '</div>';
    }
    // last column
    $element[$keys[$i * $column_height]]['#prefix'] = '<div class="multicolumncheckboxesradios-column multicolumncheckboxesradios-column-last">';
    $element[$keys[count($keys) - 1]]['#suffix'] = '</div></div>';
  }

    // default stylesheet
  drupal_add_css(drupal_get_path('module', 'multicolumncheckboxesradios') .'/multicolumncheckboxesradios.css');

  return $element;
}



/**
 * Transpose the checkboxes linear array from column-major to row-major
 *
 * This function does a matrix transpose on a 2d matrix stored in a 1d linear array,
 * For example, array with 26 elements, transpose to width = 5, height = 6:
 *
 * 00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
 *
 * Originally in column major:
 *
 * 00 05 10 15 20 25
 * 01 06 11 16 21
 * 02 07 12 17 22
 * 03 08 13 18 23
 * 04 09 14 19 24
 *
 * After transpose,
 *
 * 00 01 02 03 04
 * 05 06 07 08 09
 * 10 11 12 13 14
 * 15 16 17 18 19
 * 20 21 22 23 24
 * 25
 *
 * the lineary array becomes:
 *
 * 00 05 10 15 20 25 01 06 11 16 21 02 07 12 17 22 03 08 13 18 23 04 09 14 19 24
 *
 * @param $width
 *   the target width after transpose
 * @param $height
 *   the traget height after transpose
 * @param $element
 *   the checkboxes/radios form element, this will be modified
 * @return
 *   an array with keys 'begins' and 'ends' each an array
 *   containing the beginning and ending element of each column
 */
function _multicolumncheckboxesradios_transpose($width, $height, &$element) {
  $keys = array_keys($element['#options']);
  $keys_count = count($keys);
  // copy and unset the checkboxe/radios child elements, we will rearrange them
  $save_copy = array();
  for ($i = 0 ; $i < $keys_count ; ++$i) {
    $save_copy[$keys[$i]] = $element[$keys[$i]];
    unset($element[$keys[$i]]);
  }
  $transposed_keys = array();     // this array will have the keys in new order
  $row_sizes = array();           // remember each row size, after transpose, this become column sizes
  $t = 0;                         // index of the transposed key array, advance each time an element is added
  for ($x = 0 ; $x < $width ; ++$x) {
    $r = 0;                       // keep track of row size
    for ($y = 0 ; $y < $height ; ++$y) {
      $i = $y *  $width + $x;
      if ($i < $keys_count) {
        $transposed_keys[$t] = $keys[$i];
        ++$t;
        ++$r;
      }
    }
    $row_sizes[] = $r;
  }
  $begins_ends = array();
  $r = 0;
  for ($i = 0 ; $i < $width ; ++$i) {
    $begins_ends['begins'][] = $transposed_keys[$r];
    $r += $row_sizes[$i];
    $begins_ends['ends'][] =  $transposed_keys[$r - 1];
  }
  // put the checkboxe/radio children back in transposed order
  for ($i = 0 ; $i < $keys_count ; ++$i) {
    $element[$transposed_keys[$i]] = $save_copy[$transposed_keys[$i]];
  }

  return $begins_ends;
}

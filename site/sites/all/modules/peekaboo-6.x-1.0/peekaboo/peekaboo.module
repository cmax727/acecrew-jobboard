<?php
// $Id: peekaboo.module,v 1.1.2.2 2010/01/18 02:34:14 danielb Exp $

/**
 * @file
 * The Peekaboo module.
 */

/**
 * Implementation of hook_menu().
 */
function peekaboo_menu() {
  $items = array();
  $items['peekaboo'] = array(
    'title' => 'Peekaboo Ajax Callback',
    'page callback' => 'peekaboo_ajax',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Ajax callback.
 *
 * Given a node ID and field name this will get the HTML
 * of the content field.
 */
function peekaboo_ajax($nid, $field_name, $delta, $ie_token) {
   $field_name = str_replace('-', '_', $field_name);
   $error = 0;
   if ($node = node_load($nid)) {
     $error++;
     if ($node_field = $node->$field_name) {
        $error++;
        if ($field = $node_field[$delta]['field']) {
           $error++;
           if ($field_data = content_fields($field)) {
             $error++;
             if ($peekaboo_field = content_view_field($field_data, $node, FALSE, FALSE)) {
               print $peekaboo_field;
               exit;
             }
           }
        }
     }
   }
   drupal_set_message(
     '<strong>'. t('Peekaboo error') .':</strong>'
     .' #'. $error .', '. $nid .'/'. $field_name .'/'. $delta,
     'error'
   );
   print theme('status_messages', 'error');
   exit;
}

/**
 * Implementation of hook_theme().
 */
function peekaboo_theme() {
  return array(
    'peekaboo_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'peekaboo_formatter_plain' => array(
      'arguments' => array('element' => NULL),
    ),
    'peekaboo_formatter_link' => array(
      'arguments' => array('element' => NULL),
    ),
     /*
    'peekaboo_formatter_fieldset' => array(
      'arguments' => array('element' => NULL),
    ),
    */
    'peekaboo_select' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_info().
 */
function peekaboo_field_info() {
  return array(
    'peekaboo' => array(
      'label' => t('Peekaboo'),
      'description' => t('Display a chosen CCK field in a node via Ajax.'),
      'callbacks' => array(
        'tables' => CONTENT_CALLBACK_DEFAULT,
        'arguments' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function peekaboo_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array();
      $form['peekaboo_link_text'] = array(
        '#type' => 'textfield',
        '#title' => t('Peekaboo link text'),
        '#default_value' => !empty($field['peekaboo_link_text']) ? $field['peekaboo_link_text'] : t('Peekaboo'),
        '#required' => TRUE,
        '#description' => t('Please supply a word or phrase here even if you intend to remove it via theming or CSS.'),
        '#maxlength' => 128,
      );
      $form['peekaboo_link_remove'] = array(
        '#type' => 'checkbox',
        '#title' => t('Remove peekaboo link once it is used.'),
      );
      return $form;

    case 'save':
      return array(
        'peekaboo_link_text',
        'peekaboo_link_remove',
      );

    case 'database columns':
      $columns = array(
        'field' => array('type' => 'varchar', 'not null' => FALSE, 'length' => 255),
      );
      return $columns;

  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function peekaboo_content_is_empty($item, $field) {
   return empty($item['field']);
}

/**
 * Implementation of hook_field_formatter_info().
 */
function peekaboo_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('peekaboo'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'plain' => array(
      'label' => t('Plain (no link)'),
      'field types' => array('peekaboo'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'link' => array(
      'label' => t('Link only'),
      'field types' => array('peekaboo'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
     /*
    'fieldset' => array(
      'label' => t('Fieldset'),
      'field types' => array('peekaboo'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    */
  );
}

/**
 * Implementation of hook_widget_info().
 */
function peekaboo_widget_info() {
  return array(
    'peekaboo_select' => array(
      'label' => t('Select list'),
      'field types' => array('peekaboo'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 */
function peekaboo_elements() {
  return array(
    'peekaboo_select' => array(
      '#input' => TRUE,
      '#columns' => array('field'),
      '#delta' => 0,
      '#process' => array('peekaboo_select_process'),
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function peekaboo_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  switch ($field['widget']['type']) {
    case 'peekaboo_select':
      $element = array(
        '#type' => 'peekaboo_select',
        '#default_value' => $items,
      );
      break;
  }
  return $element;
}

/**
 * Process an individual element.
 */
function peekaboo_select_process($element, $edit, $form_state, $form) {
  // The peekaboo widget doesn't need to create its own
  // element, it can wrap around the optionwidgets_select element.
  // Add a validation step where the value can be unwrapped.

  $field_key  = $element['#columns'][0];
  $element[$field_key] = array(
    '#type' => 'optionwidgets_select',
    '#default_value' => isset($element['#value']) ? $element['#value'] : '',
    '#element_validate' => array('optionwidgets_validate', 'peekaboo_select_validate'),

    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#field_name' => $element['#field_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],

  );

  return $element;
}

/**
 * Validate a select element.
 */
function peekaboo_select_validate($element, &$form_state) {
  $field_key = $element['#columns'][0];
  $new_parents = array();
  $value = $form_state['values'];
  foreach ($element['#parents'] as $parent) {
    $value = $value[$parent];
    // Use === to be sure we get right results if parent is a zero (delta) value.
    if ($parent === $field_key) {
      $element['#parents'] = $new_parents;
      form_set_value($element, $value, $form_state);    
      break;
    }
    $new_parents[] = $parent;
  }
}

/**
 * Implementation of hook_allowed_values().
 */
function peekaboo_allowed_values($field) {
  $options = _peekaboo_potential_references($field);
  if (!$field['required']) {
    $options = array(0 => '<'. t('none') .'>') + $options;
  }
  return $options;
}


/**
 * Fetch the options to show to the user in the form.
 */
function _peekaboo_potential_references($field) {
  $options = array();
  $content_fields = content_fields(NULL, $field['type_name']);
  $field_types = _content_field_types();
  foreach ($content_fields as $content_field) {
    if ($field['field_name'] != $content_field['field_name'] && !$content_field['locked']) {
      $field_type = $field_types[$content_field['type']];
      $text = t(
         '@type: @field (@label)', 
         array(
           '@type' => t($field_type['label']), 
           '@label' => t($content_field['widget']['label']), 
           '@field' => $content_field['field_name'],
         )
      );
      $options[$content_field['field_name']] = (drupal_strlen($text) > 80) ? truncate_utf8($text, 77) . '...' : $text;
    }
  }
  // Sort the list by type, then by field name, then by label.
  asort($options);
  return $options;
}

/**
 * Generate HTML class/id names that are compatible with CSS 2.1.
 *
 * http://www.w3.org/TR/CSS21/syndata.html#characters
 *
 * @param $identifier
 *   A raw/dirty string to convert to a css/id name.
 * @param $filter
 *   Array where the keys are 'search strings' and the values are 'replace
 *   strings'.
 * @return
 *   The cleaned css name.
*/
function peekaboo_css_name($identifier, $filter = array(' ' => '-', '_' => '-', '[' => '-', ']' => ''))
{
  $identifier = strtr($identifier, $filter);

  // Valid characters in a CSS identifier are:
  // - the hyphen (U+002D)
  // - a-z (U+0030 - U+0039)
  // - A-Z (U+0041 - U+005A)
  // - the underscore (U+005F)
  // - 0-9 (U+0061 - U+007A)
  // - ISO 10646 characters U+00A1 and higher
  // We strip out any character not in the above list.
  $identifier = preg_replace(
    '/[^\x{002D}\x{0030}-\x{0039}\x{0041}-\x{005A}\x{005F}\x{0061}-\x{007A}\x{00A1}-\x{FFFF}]/u',
    '',
    $identifier
  );

  // Return lowercase to reduce confusion about case-sensitivity in js and css.
  return strtolower($identifier);
} 

/**
 * Return the div structure required by peekaboo.
 */
function peekaboo_container($element, $id = NULL) {

  if (empty($element['#item']['field'])) {
    return;
  }

  $id = $id ? $id : peekaboo_id($element);

  // Include the JavaScript.
  $peekaboo_path = drupal_get_path('module', 'peekaboo');
  drupal_add_css($peekaboo_path .'/peekaboo.css');
  drupal_add_js($peekaboo_path .'/peekaboo.js');

  $classes = "peekaboo-container peekaboo-collapsed peekaboo-unprocessed";
  $css_id = peekaboo_css_name($id);

  return '<div id="'. $css_id .'" class="'. $classes .'"></div>';
}

/**
 * Form builder function for fieldset form.

 #--->>> couldn't get this to work :(

function peekaboo_fieldset($form_state, $element, $id = NULL) {
  $id = $id ? $id : peekaboo_id($element);

  // Build form.
  $form[$id] = array(
    '#type' => 'fieldset',
    '#title' => peekaboo_cck_setting($element, 'peekaboo_link_text'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#attributes' => array(
      'id' => peekaboo_css_name($id) .'-link',
      'class' => 'peekaboo-link peekaboo-collapsed',
     ),
  );
  $form[$id]['container'] = array(
    '#value' => peekaboo_container($element, $id),
  );
  return $form;
} */

/**
 * Get a setting for an element.
 */
function peekaboo_cck_setting($element, $setting) {
  // Get information about this CCK field.
  $field = content_fields($element['#field_name']);
  return $field[$setting];
}

/**
 * Get the link remove setting for an element.
 */
function peekaboo_link_remove($element) {
  // Get information about this CCK field.
  $field = content_fields($element['#field_name']);
  return $field['peekaboo_link_text'];
}

/**
 * Get the link anchor for an element.
 */
function peekaboo_link_anchor($element, $id = NULL) {

  if (empty($element['#item']['field'])) {
    return;
  }

  $id = $id ? $id : peekaboo_id($element);

  $classes = array(
     'peekaboo-link', 
     'peekaboo-collapsed', 
     'peekaboo-unprocessed'
  );
  if (peekaboo_cck_setting($element, 'peekaboo_link_remove')) {
    $classes[] = 'peekaboo-link-removable';
  }

  return l(
    peekaboo_cck_setting($element, 'peekaboo_link_text'),
    '#',
     array(
       'attributes' => array(
         'id' => peekaboo_css_name($id) .'-link',
         'class' => implode(' ', $classes),
       ),
     )
  );
}

/**
 * Get the identifier for an element in the format required by peekaboo.
 */
function peekaboo_id($element) {
  return 'peekaboo-'. $element['#node']->nid .'-'. $element['#field_name'] .'-'. $element['#item']['#delta'];
}

/**
 * FAPI theme for an individual element.
 */
function theme_peekaboo_select($element) {
  return $element['#children'];
}

/**
 * Theme function for 'default' peekaboo formatter.
 */
function theme_peekaboo_formatter_default($element) {
  $output = '';
  // Output the HTML for the hyperlink.
  $output .= peekaboo_link_anchor($element);
  // Output the DIV container required by Ajax.
  $output .= peekaboo_container($element);
  return $output;
}

/**
 * Theme function for 'plain' peekaboo formatter.
 */
function theme_peekaboo_formatter_plain($element) {
  $output = '';
  // Output the DIV container required by Ajax.
  $output .= peekaboo_container($element);
  return $output;
}

/**
 * Theme function for 'link' peekaboo formatter.
 */
function theme_peekaboo_formatter_link($element) {
  $output = '';
  // Output the HTML for the hyperlink.
  $output .= peekaboo_link_anchor($element);
  return $output;
}

/**
 * Theme function for 'fieldset' peekaboo formatter.

 #--->>> couldn't get this to work :(

function theme_peekaboo_formatter_fieldset($element) {
  $output = '';
  // Output the fieldset form.
  $output .= drupal_get_form('peekaboo_fieldset', $element);
  return $output;
} 
*/


/*

TO DO: Effects for the change

*/